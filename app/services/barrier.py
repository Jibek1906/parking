"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–ª–∞–≥–±–∞—É–º–æ–º
"""
import requests
from requests.auth import HTTPDigestAuth
from ..config import BARRIER_CONFIG, PARKING_CONFIG


def open_barrier(camera_ip: str) -> bool:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —à–ª–∞–≥–±–∞—É–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
    try:
        barrier_config = None
        if camera_ip == PARKING_CONFIG["entry_camera_ip"]:
            barrier_config = BARRIER_CONFIG["entry_barrier"]
        elif camera_ip == PARKING_CONFIG["exit_camera_ip"]:
            barrier_config = BARRIER_CONFIG["exit_barrier"]
        else:
            print(f"‚ö†Ô∏è No barrier configuration for camera {camera_ip}")
            return False

        IP = barrier_config["ip"]
        PORT = barrier_config["port"]
        USER = barrier_config["user"]
        PASS = barrier_config["password"]
        CHANNEL = barrier_config["channel"]

        URL = f"http://{IP}:{PORT}/ISAPI/Parking/channels/{CHANNEL}/barrierGate"
        AUTH = HTTPDigestAuth(USER, PASS)
        HEADERS = {"Content-Type": "application/xml"}

        xml_data = '''<?xml version="1.0" encoding="utf-8"?>
<BarrierGate><ctrlMode>open</ctrlMode></BarrierGate>'''

        print(f"üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–ª–∞–≥–±–∞—É–º –¥–ª—è –∫–∞–º–µ—Ä—ã {camera_ip}...")

        try:
            response = requests.put(
                URL,
                auth=AUTH,
                headers=HEADERS,
                data=xml_data.encode('utf-8'),
                timeout=10
            )
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: —à–ª–∞–≥–±–∞—É–º {camera_ip} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout)")
            return False
        except requests.exceptions.ConnectionError:
            print(f"üåê –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: —à–ª–∞–≥–±–∞—É–º {camera_ip} —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (connection error)")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —à–ª–∞–≥–±–∞—É–º–∞ {camera_ip}: {e}")
            return False

        print(f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")

        if response.status_code == 200:
            print(f"‚úÖ –®–ª–∞–≥–±–∞—É–º –¥–ª—è –∫–∞–º–µ—Ä—ã {camera_ip} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!")
            return True
        elif response.status_code == 403:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")

        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –¥–ª—è {camera_ip}: {e}")
        return False

def close_barrier(camera_ip: str) -> bool:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —à–ª–∞–≥–±–∞—É–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
    try:
        barrier_config = None
        if camera_ip == PARKING_CONFIG["entry_camera_ip"]:
            barrier_config = BARRIER_CONFIG["entry_barrier"]
        elif camera_ip == PARKING_CONFIG["exit_camera_ip"]:
            barrier_config = BARRIER_CONFIG["exit_barrier"]
        else:
            print(f"‚ö†Ô∏è No barrier configuration for camera {camera_ip}")
            return False

        IP = barrier_config["ip"]
        PORT = barrier_config["port"]
        USER = barrier_config["user"]
        PASS = barrier_config["password"]
        CHANNEL = barrier_config["channel"]

        URL = f"http://{IP}:{PORT}/ISAPI/Parking/channels/{CHANNEL}/barrierGate"
        AUTH = HTTPDigestAuth(USER, PASS)
        HEADERS = {"Content-Type": "application/xml"}

        xml_data = '''<?xml version="1.0" encoding="utf-8"?>
<BarrierGate><ctrlMode>close</ctrlMode></BarrierGate>'''

        print(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–ª–∞–≥–±–∞—É–º –¥–ª—è –∫–∞–º–µ—Ä—ã {camera_ip}...")

        try:
            response = requests.put(
                URL,
                auth=AUTH,
                headers=HEADERS,
                data=xml_data.encode('utf-8'),
                timeout=10
            )
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: —à–ª–∞–≥–±–∞—É–º {camera_ip} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout)")
            return False
        except requests.exceptions.ConnectionError:
            print(f"üåê –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: —à–ª–∞–≥–±–∞—É–º {camera_ip} —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (connection error)")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —à–ª–∞–≥–±–∞—É–º–∞ {camera_ip}: {e}")
            return False

        print(f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")

        if response.status_code == 200:
            print(f"‚úÖ –®–ª–∞–≥–±–∞—É–º –¥–ª—è –∫–∞–º–µ—Ä—ã {camera_ip} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!")
            return True
        elif response.status_code == 403:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")

        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –¥–ª—è {camera_ip}: {e}")
        return False

def get_barrier_state(camera_ip: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–ª–∞–≥–±–∞—É–º–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
    try:
        barrier_config = None
        if camera_ip == PARKING_CONFIG["entry_camera_ip"]:
            barrier_config = BARRIER_CONFIG["entry_barrier"]
        elif camera_ip == PARKING_CONFIG["exit_camera_ip"]:
            barrier_config = BARRIER_CONFIG["exit_barrier"]
        else:
            print(f"‚ö†Ô∏è No barrier configuration for camera {camera_ip}")
            return "unknown"

        IP = barrier_config["ip"]
        PORT = barrier_config["port"]
        USER = barrier_config["user"]
        PASS = barrier_config["password"]
        CHANNEL = barrier_config["channel"]

        URL = f"http://{IP}:{PORT}/ISAPI/Parking/channels/{CHANNEL}/barrierGate/status"
        AUTH = HTTPDigestAuth(USER, PASS)

        print(f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–ª–∞–≥–±–∞—É–º–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã {camera_ip}...")

        try:
            response = requests.get(
                URL,
                auth=AUTH,
                timeout=10
            )
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: —à–ª–∞–≥–±–∞—É–º {camera_ip} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout)")
            return "timeout"
        except requests.exceptions.ConnectionError:
            print(f"üåê –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: —à–ª–∞–≥–±–∞—É–º {camera_ip} —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (connection error)")
            return "connection_error"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–ª–∞–≥–±–∞—É–º–∞ {camera_ip}: {e}")
            return "error"

        print(f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")

        if response.status_code == 200:
            import xml.etree.ElementTree as ET
            try:
                root = ET.fromstring(response.text)
                state = root.findtext("barrierState")
                print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–ª–∞–≥–±–∞—É–º–∞: {state}")
                return state if state else "unknown"
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
                return "parse_error"
        elif response.status_code == 403:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
            return "auth_error"
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: {response.status_code}")
            return "unexpected_code"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –¥–ª—è {camera_ip}: {e}")
        return "error"
